diff --git a/build/readConfigFileAndSetRootDir.js b/build/readConfigFileAndSetRootDir.js
index e989961ba71bbea43eb293ebdc7739f00f6e85e7..f9932fdb074cfd86d222240d7764c61fb3a8a1c3 100644
--- a/build/readConfigFileAndSetRootDir.js
+++ b/build/readConfigFileAndSetRootDir.js
@@ -153,7 +153,7 @@ async function readConfigFileAndSetRootDir(configPath) {
 // Load the TypeScript configuration
 const loadTSConfigFile = async configPath => {
   // Get registered TypeScript compiler instance
-  const registeredCompiler = await getRegisteredCompiler();
+  const registeredCompiler = await getRegisteredCompiler(configPath);
   registeredCompiler.enabled(true);
   let configObject = (0, _jestUtil().interopRequireDefault)(
     require(configPath)
@@ -167,22 +167,28 @@ const loadTSConfigFile = async configPath => {
   return configObject;
 };
 let registeredCompilerPromise;
-function getRegisteredCompiler() {
+function getRegisteredCompiler(configPath) {
   // Cache the promise to avoid multiple registrations
-  registeredCompilerPromise = registeredCompilerPromise ?? registerTsNode();
+  registeredCompilerPromise = registeredCompilerPromise ?? registerTsNode(configPath);
   return registeredCompilerPromise;
 }
-async function registerTsNode() {
+async function registerTsNode(configPath) {
   try {
     // Register TypeScript compiler instance
-    const tsNode = await import('ts-node');
+    let tsNodePath = require.resolve('ts-node', { paths: [configPath] })
+    if (process.platform === 'win32') {
+      tsNodePath = `file:///${tsNodePath}`
+    }
+    const tsNode = require(tsNodePath);
     return tsNode.register({
       compilerOptions: {
         module: 'CommonJS'
       },
       moduleTypes: {
         '**': 'cjs'
-      }
+      },
+      // Don't let type checks crash the UI Test Visualizer
+      transpileOnly: true
     });
   } catch (e) {
     if (e.code === 'ERR_MODULE_NOT_FOUND') {
